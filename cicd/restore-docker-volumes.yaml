---
- name: Restore Docker Volumes and Start Restore Container ({{ env }})
  hosts: "{{ 'localhost' if env == 'local' else SSH_SERVER_IP }}"
  connection: "{{ 'local' if env == 'local' else 'ssh' }}"
  gather_facts: false
  vars:
    SSH_SERVER_IP: "localhost"
    env: "{{ env }}" 

  tasks:
    - name: Include common variables
      include_vars: "../../env/common.yml"
    
    - name: Include env-specific variables
      include_vars: 
         file: "{{ '../../env/deploy.local.yml' if env == 'local' else '../../env/deploy.prod.yml' }}"

    - name: Set DOCKER_VOLUME_VERSION from parameter
      set_fact:
        DOCKER_VOLUME_VERSION: "{{ env }}"

    - name: Check if Docker network exists
      command: docker network inspect "{{ DOMAIN_NAME }}_network"
      register: network_check
      ignore_errors: true

    - name: Create Docker network if it does not exist
      command: docker network create "{{ DOMAIN_NAME }}_network"
      when: network_check.rc != 0

    - name: Check Docker volumes existence
      command: docker volume inspect "{{ item }}"
      register: volume_check
      ignore_errors: true
      loop:
        - "{{ DOMAIN_NAME }}_db_data"
        - "{{ DOMAIN_NAME }}_webserver_certs"
        - "{{ DOMAIN_NAME }}_website_files"

    - name: Remove old container (if any)
      community.docker.docker_container:
        name: "{{ item }}"
        state: absent
      loop:
        - "{{ DOMAIN_NAME }}-restore"
      ignore_errors: yes

    - name: Create missing Docker volumes
      command: docker volume create "{{ item }}"
      when: volume_check.results[loop.index0].rc != 0
      ignore_errors: true
      loop:
        - "{{ DOMAIN_NAME }}_db_data"
        - "{{ DOMAIN_NAME }}_webserver_certs"
        - "{{ DOMAIN_NAME }}_website_files"

    - name: Start restore container
      command: >
        docker run -d --name {{ DOMAIN_NAME }}-restore
        --network {{ DOMAIN_NAME }}_network
        -e AWS_ACCESS_KEY_ID={{ AWS_ACCESS_KEY_ID }}
        -e AWS_SECRET_ACCESS_KEY={{ AWS_SECRET_ACCESS_KEY }}
        -e AWS_BACKUP_BUCKET={{ AWS_BACKUP_BUCKET }}
        -e DOMAIN_NAME={{ DOMAIN_NAME }}
        -e DOCKER_VOLUME_VERSION={{ DOCKER_VOLUME_VERSION }}
        -v {{ DOMAIN_NAME }}_website_files:/var/www/vhosts/
        -v {{ DOMAIN_NAME }}_webserver_certs:/usr/local/lsws/cert
        -v {{ DOMAIN_NAME }}_db_data:/var/lib/mysql
        {{ DOCKER_HUB_REPOSITORY }}:{{ DOMAIN_NAME }}-restore-{{ IMAGE_TAG }}

    - name: Restart database container
      command: docker restart {{ DOMAIN_NAME }}-database

    - name: Restart webserver container
      command: docker restart {{ DOMAIN_NAME }}-webserver
